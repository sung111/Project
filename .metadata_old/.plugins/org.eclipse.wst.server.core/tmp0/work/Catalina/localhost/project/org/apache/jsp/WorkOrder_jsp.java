/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.100
 * Generated at: 2025-03-18 04:41:55 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class WorkOrder_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("    <title>OOOOO 생산 정보</title>\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"css/reset.css\">\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"css/workorder.css\">\r\n");
      out.write("    <!-- 옛날 데이터들 -->\r\n");
      out.write("    <script src=\"data/material.js\"></script>\r\n");
      out.write("    <script src=\"data/productdata.js\"></script>\r\n");
      out.write("    <script src=\"data/productinmaterialdata.js\"></script>\r\n");
      out.write("    <script src=\"data/start.js\"></script>\r\n");
      out.write("    <!-- js -->\r\n");
      out.write("    <script src=\"js/workorder.js\"></script>\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("    <div class=\"productinfo\">\r\n");
      out.write("        <table>\r\n");
      out.write("            <tr class=\"productinfo-info\">\r\n");
      out.write("                <td class=\"productinfo-info-list\">\r\n");
      out.write("                    <div class=\"productinfo-info-name\">LOTNO.</div>\r\n");
      out.write("                    <input type=\"text\" class=\"productinfo-info-completion\" id=\"lotno\" alt=\"productinfo-LOTNO\">\r\n");
      out.write("                </td>\r\n");
      out.write("                <td class=\"productinfo-info-list\">\r\n");
      out.write("                    <div class=\"productinfo-info-name\">단위</div>\r\n");
      out.write("                    <input type=\"text\" class=\"productinfo-info-completion\" id=\"danwi\" alt=\"productinfo-단위\">\r\n");
      out.write("                </td>\r\n");
      out.write("                <td class=\"productinfo-info-list\">\r\n");
      out.write("                    <div class=\"productinfo-info-name\">품명[규격]</div>\r\n");
      out.write("                    <input type=\"text\" class=\"productinfo-info-productname\" alt=\"productinfo-품명[규격]\">\r\n");
      out.write("                    <ul id=\"finishi-list\" class=\"finishi-list\">\r\n");
      out.write("                    </ul>\r\n");
      out.write("                    <button type=\"button\" class=\"productsearch\" alt=\"조회\">조회</button>\r\n");
      out.write("                </td>\r\n");
      out.write("                <td class=\"productinfo-info-list\">\r\n");
      out.write("                    <div class=\"productinfo-info-name\">제작 수량</div><input type=\"text\" class=\"productinfo-info-completion\"\r\n");
      out.write("                        alt=\"productinfo-제작수량\">\r\n");
      out.write("                </td>\r\n");
      out.write("                <!-- <td class=\"productinfo-info-list\">\r\n");
      out.write("                    <div class=\"productinfo-info-name\">생산 시작</div><input type=\"date\" class=\"productinfo-info-completion\"\r\n");
      out.write("                        alt=\"productinfo-입고날짜\" id=\"startDate\">\r\n");
      out.write("                </td>\r\n");
      out.write("                <td class=\"productinfo-info-list\">\r\n");
      out.write("                    <div class=\"productinfo-info-name\">생산 완료</div><input type=\"date\" class=\"productinfo-info-completion\"\r\n");
      out.write("                        alt=\"productinfo-유효기간\">\r\n");
      out.write("                </td> -->\r\n");
      out.write("            </tr>\r\n");
      out.write("        </table>\r\n");
      out.write("        <div class=\"material-info\">\r\n");
      out.write("            <table>\r\n");
      out.write("\r\n");
      out.write("                <tr class=\"material-info-tag\">\r\n");
      out.write("                    <th>명칭</th>\r\n");
      out.write("                    <th>LOT/NO</th>\r\n");
      out.write("                    <th>투입단위</th>\r\n");
      out.write("                    <th>재고수량</th>\r\n");
      out.write("                    <th>공급업체</th>\r\n");
      out.write("                    <th>창고위치</th>\r\n");
      out.write("                    <th>관리사항</th>\r\n");
      out.write("                </tr>\r\n");
      out.write("            </table>\r\n");
      out.write("        </div>\r\n");
      out.write("        <div class=\"check-info\">\r\n");
      out.write("            <table>\r\n");
      out.write("                <tr class=\"check-info-title\">\r\n");
      out.write("                    <th>제조 과정</th>\r\n");
      out.write("                </tr>\r\n");
      out.write("                <tr class=\"check-info-process\">\r\n");
      out.write("                    <td>\r\n");
      out.write("                        <!-- 제조과정 -->\r\n");
      out.write("                        <iframe id=\"processFrame\" src=\"production_process.html\" style=\"display:none;\"></iframe>\r\n");
      out.write("                    </td>\r\n");
      out.write("                </tr>\r\n");
      out.write("                <tr class=\"check-info-buttoncontainer\">\r\n");
      out.write("                    <td class=\"check-info-buttonlayer\">\r\n");
      out.write("                        <button type=\"button\" class=\"check-info-close\">나가기</button>\r\n");
      out.write("                    </td>\r\n");
      out.write("                </tr>\r\n");
      out.write("            </table>\r\n");
      out.write("        </div>\r\n");
      out.write("    </div>\r\n");
      out.write("</body>\r\n");
      out.write("<script>\r\n");
      out.write("    // 자재 BOM이 List에 출력되는 스크립트.\r\n");
      out.write("    document.addEventListener(\"DOMContentLoaded\", function () {\r\n");
      out.write("        const inputField = document.querySelector(\".productinfo-info-productname\");\r\n");
      out.write("        const searchButton = document.querySelector(\".productsearch\");\r\n");
      out.write("        const materialTable = document.querySelector(\".material-info table\");\r\n");
      out.write("        const processContainer = document.querySelector(\".check-info-process td\");\r\n");
      out.write("\r\n");
      out.write("        searchButton.addEventListener(\"click\", function () {\r\n");
      out.write("            // 제품명\r\n");
      out.write("            let query = inputField.value.split(\" [\")[0].trim();\r\n");
      out.write("            let foundItem = product.find(item => item.제품명 === query);\r\n");
      out.write("\r\n");
      out.write("            if (foundItem) {\r\n");
      out.write("                // 제품별로 원료의 목록을 가져온다.\r\n");
      out.write("                let ingredients = productIngredients[query] || [];\r\n");
      out.write("                let tableContent = `<tr class=\"material-info-tag\">\r\n");
      out.write("                                <th>명칭</th><th>LOT/NO</th><th>투입단위</th><th>재고수량</th><th>공급업체</th><th>창고위치</th><th>관리사항</th>\r\n");
      out.write("                            </tr>`;\r\n");
      out.write("                // 출력\r\n");
      out.write("                ingredients.forEach(ingredient => {\r\n");
      out.write("                    let materialData = start.find(item => item.제품명 === ingredient) || {};\r\n");
      out.write("                    tableContent += `<tr class=\"material-info-content\">\r\n");
      out.write("                                <td>");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ingredient}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</td>\r\n");
      out.write("                                <td>");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${materialData.LotNo || \"N/A\"}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</td>\r\n");
      out.write("                                <td>");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${materialData.단위 || \"N/A\"}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</td>\r\n");
      out.write("                                <td>");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${materialData.규격 || \"N/A\"}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</td>\r\n");
      out.write("                                <td>");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${materialData.공급업체 || \"N/A\"}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</td>\r\n");
      out.write("                                <td>");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${materialData.창고위치 || \"N/A\"}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</td>\r\n");
      out.write("                                <td>");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${materialData.창고위치 || \"N/A\"}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</td>\r\n");
      out.write("                            </tr>`;\r\n");
      out.write("                });\r\n");
      out.write("                materialTable.innerHTML = tableContent;\r\n");
      out.write("            } else {\r\n");
      out.write("                alert(\"해당 제품을 찾을 수 없습니다.\");\r\n");
      out.write("            }\r\n");
      out.write("\r\n");
      out.write("        });\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    // 품명[규격]의 스크립트\r\n");
      out.write("    document.addEventListener(\"DOMContentLoaded\", function () {\r\n");
      out.write("        const inputField = document.querySelector(\".productinfo-info-productname\");\r\n");
      out.write("        const suggestionList = document.getElementById(\"finishi-list\");\r\n");
      out.write("        const searchButton = document.querySelector(\".productsearch\");\r\n");
      out.write("        const lotnoField = document.querySelector('[alt=\"productinfo-LOTNO\"]');\r\n");
      out.write("        const unitField = document.querySelector('[alt=\"productinfo-단위\"]');\r\n");
      out.write("        const processContainer = document.querySelector(\".check-info-process td\");\r\n");
      out.write("\r\n");
      out.write("        // 품명[규격]작성 시 연관된 이름이 나타나는 스크립트.\r\n");
      out.write("        inputField.addEventListener(\"input\", function () {\r\n");
      out.write("            let query = inputField.value.trim().toLowerCase();\r\n");
      out.write("            suggestionList.innerHTML = \"\";\r\n");
      out.write("            if (query !== \"\") {\r\n");
      out.write("                let filtered = product.filter(item => item.제품명.includes(query));\r\n");
      out.write("\r\n");
      out.write("                filtered.forEach(item => {\r\n");
      out.write("                    let listItem = document.createElement(\"li\");\r\n");
      out.write("                    listItem.textContent = `");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${item.제품명}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write(' ');
      out.write('[');
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${item.규격}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("]`;\r\n");
      out.write("\r\n");
      out.write("                    // 클릭 시 입력 필드에 제품명과 규격 설정\r\n");
      out.write("                    listItem.addEventListener(\"click\", function () {\r\n");
      out.write("                        inputField.value = `");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${item.제품명}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write(' ');
      out.write('[');
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${item.규격}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("]`;\r\n");
      out.write("                        suggestionList.innerHTML = \"\";\r\n");
      out.write("                    });\r\n");
      out.write("\r\n");
      out.write("                    suggestionList.appendChild(listItem);\r\n");
      out.write("                });\r\n");
      out.write("            }\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("        // 입력창 외부를 누른다면 자동 작성해주는 List가 닫힌다.\r\n");
      out.write("        document.addEventListener(\"click\", function (event) {\r\n");
      out.write("            if (!inputField.contains(event.target) && !suggestionList.contains(event.target)) {\r\n");
      out.write("                suggestionList.innerHTML = \"\";\r\n");
      out.write("            }\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("        // 조회를 눌렀을 때, LOTNO.와 단위가 자동으로 나타나게 함.\r\n");
      out.write("        searchButton.addEventListener(\"click\", function () {\r\n");
      out.write("            let query = inputField.value.split(\" [\")[0].trim();\r\n");
      out.write("            let foundItem = product.find(item => item.제품명 === query);\r\n");
      out.write("\r\n");
      out.write("            if (foundItem) {\r\n");
      out.write("                lotnoField.value = foundItem.LotNo;\r\n");
      out.write("                unitField.value = foundItem.단위;\r\n");
      out.write("            } else {\r\n");
      out.write("                alert(\"해당 제품을 찾을 수 없습니다.\");\r\n");
      out.write("            }\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("        // 생산공정에서 제조과정을 나타내야 한다.\r\n");
      out.write("        searchButton.addEventListener(\"click\", function () {\r\n");
      out.write("            let query = inputField.value.split(\" [\")[0].trim();\r\n");
      out.write("            if (!query) {\r\n");
      out.write("                alert(\"제품명을 입력하세요.\");\r\n");
      out.write("                return;\r\n");
      out.write("            }\r\n");
      out.write("\r\n");
      out.write("            // production_process.html에서 데이터를 불러온다\r\n");
      out.write("            let processFrame = document.getElementById(\"processFrame\");\r\n");
      out.write("            processFrame.onload = function () {\r\n");
      out.write("                let doc = processFrame.contentDocument || processFrame.contentWindow.document;\r\n");
      out.write("                let targetTable = null;\r\n");
      out.write("\r\n");
      out.write("                if (query.includes(\"부대찌개\")) {\r\n");
      out.write("                    targetTable = doc.getElementById(\"budae-jjigae\");\r\n");
      out.write("                } else if (query.includes(\"김치찌개\")) {\r\n");
      out.write("                    targetTable = doc.getElementById(\"kimchi-soup\");\r\n");
      out.write("                }\r\n");
      out.write("                if (!targetTable) {\r\n");
      out.write("                    alert(\"해당 제품의 공정 정보를 찾을 수 없습니다.\");\r\n");
      out.write("                    return;\r\n");
      out.write("                }\r\n");
      out.write("                if (!targetTable) {\r\n");
      out.write("                    alert(\"해당 제품의 공정 정보를 찾을 수 없습니다.\");\r\n");
      out.write("                    return;\r\n");
      out.write("                }\r\n");
      out.write("\r\n");
      out.write("                let rows = targetTable.querySelectorAll(\"tr\");\r\n");
      out.write("                let processData = \"<strong> 제조 공정</strong>\";\r\n");
      out.write("\r\n");
      out.write("                rows.forEach((row, index) => {\r\n");
      out.write("                    if (index === 0) return;\r\n");
      out.write("                    let columns = row.querySelectorAll(\"td\");\r\n");
      out.write("\r\n");
      out.write("                    if (columns.length >= 2) {\r\n");
      out.write("                        let step = columns[0].innerText.trim();\r\n");
      out.write("                        let description = columns[1].innerText.trim();\r\n");
      out.write("                        processData += `<p><strong>");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${step}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write(":</strong> ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${description}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</p>`;\r\n");
      out.write("                    }\r\n");
      out.write("                });\r\n");
      out.write("                processContainer.innerHTML = processData;\r\n");
      out.write("            };\r\n");
      out.write("            processFrame.src = \"production_process.html\";\r\n");
      out.write("        });\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("        // 첫 화면은 기본적으로 오늘 날짜로 지정한다.\r\n");
      out.write("        function getTodayDate() {\r\n");
      out.write("            const today = new Date();\r\n");
      out.write("            const year = today.getFullYear();\r\n");
      out.write("            const month = String(today.getMonth() + 1).padStart(2, '0'); // 2자리로 맞춘다.\r\n");
      out.write("            const day = String(today.getDate()).padStart(2, '0');\r\n");
      out.write("            return `");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${year}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write('-');
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${month}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write('-');
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${day}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("`;\r\n");
      out.write("        }\r\n");
      out.write("        document.getElementById(\"startDate\").value = getTodayDate();\r\n");
      out.write("\r\n");
      out.write("    // 등록 버튼을 눌렀을 때, 스크립트\r\n");
      out.write("    document.addEventListener(\"DOMContentLoaded\", function () {\r\n");
      out.write("        const registerButton = document.querySelector(\".check-info-registration\");\r\n");
      out.write("        registerButton.addEventListener(\"click\", function () {\r\n");
      out.write("            // 입력된 데이터 가져오기\r\n");
      out.write("            const lotno = document.querySelector('[alt=\"productinfo-LOTNO\"]').value.trim();\r\n");
      out.write("            const unit = document.querySelector('[alt=\"productinfo-단위\"]').value.trim();\r\n");
      out.write("            const productName = document.querySelector(\".productinfo-info-productname\").value.trim();\r\n");
      out.write("            const quantity = document.querySelector('[alt=\"productinfo-제작수량\"]').value.trim();\r\n");
      out.write("            const startDate = document.querySelector('[alt=\"productinfo-입고날짜\"]').value.trim();\r\n");
      out.write("            const endDate = document.querySelector('[alt=\"productinfo-유효기간\"]').value.trim();\r\n");
      out.write("            // 필수 입력값 확인 (비어 있으면 경고 메시지 출력)\r\n");
      out.write("            if (!lotno || !unit || !productName || !quantity || !startDate || !endDate) {\r\n");
      out.write("                alert(\"모든 필수 정보를 입력해주세요.\");\r\n");
      out.write("                return; // 등록 중단\r\n");
      out.write("            }\r\n");
      out.write("            // 기존 데이터 불러오기\r\n");
      out.write("            let workOrders = JSON.parse(localStorage.getItem(\"workOrders\")) || [];\r\n");
      out.write("            // 새로운 데이터 추가\r\n");
      out.write("            workOrders.push({ lotno, unit, productName, quantity, startDate, endDate });\r\n");
      out.write("            // 업데이트된 데이터 저장\r\n");
      out.write("            localStorage.setItem(\"workOrders\", JSON.stringify(workOrders));\r\n");
      out.write("            // NewWorkorder.html로 이동\r\n");
      out.write("            window.parent.document.querySelector(\"iframe\").src = \"componant/NewWorkorder.html\";\r\n");
      out.write("        });\r\n");
      out.write("    });\r\n");
      out.write("    \r\n");
      out.write("// 취소(돌아가기) 버튼\r\n");
      out.write("    document.addEventListener(\"DOMContentLoaded\", function () {\r\n");
      out.write("    const cancelButton = document.querySelector(\".check-info-close\");\r\n");
      out.write("\r\n");
      out.write("    cancelButton.addEventListener(\"click\", function () {\r\n");
      out.write("        window.history.back();\r\n");
      out.write("    });\r\n");
      out.write("});\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
