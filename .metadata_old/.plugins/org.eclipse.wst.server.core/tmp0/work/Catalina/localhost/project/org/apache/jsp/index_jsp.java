/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.100
 * Generated at: 2025-03-18 01:02:59 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import javax.servlet.http.HttpSession;
import javax.servlet.http.HttpServletRequest;
import java.sql.*;
import dao.User_DAO;
import dto.User_DTO;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(6);
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(6);
    _jspx_imports_classes.add("javax.servlet.http.HttpSession");
    _jspx_imports_classes.add("javax.servlet.http.HttpServletRequest");
    _jspx_imports_classes.add("dao.User_DAO");
    _jspx_imports_classes.add("dto.User_DTO");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");

/* ========== 1. 세션이 없으면 쿠키 확인 후 자동 로그인 처리 ========== */
   /*  HttpSession session = request.getSession();  왜 계속 빨간줄나오노!*/
if (session == null || session.getAttribute("userId") == null) {
    Cookie[] cookies = request.getCookies();
    if (cookies != null) {
        for (Cookie cookie : cookies) {
            if ("userId".equals(cookie.getName())) {
                String savedUserId = cookie.getValue();
                
                User_DAO userDAO = new User_DAO();
                User_DTO user = userDAO.getUserById(savedUserId);

                if (user != null) {
                    session = request.getSession(); // 새로운 세션 생성
                    session.setAttribute("userId", user.getUserId());
                    session.setAttribute("userName", user.getUserName());
                }
            }
        }
    }
}

      out.write("\r\n");
      out.write("\r\n");

/* 유저 ID 디버깅 */
String sessionUserId = (String) session.getAttribute("userId");
String sessionUserName = (String) session.getAttribute("userName");
System.out.println("index.jsp - 현재 세션 userId: " + sessionUserId);
System.out.println(" index.jsp - 현재 세션 userName: " + sessionUserName);

if (sessionUserId == null) {
	response.sendRedirect(" login.jsp");
	return;
}

      out.write('\r');
      out.write('\n');

/* 로그인이 안되있으면 강제로 login.js[p로 이동하게 된다. */
String userId = (String) session.getAttribute("userId");
if (userId == null) {
	response.sendRedirect("login.jsp");
	return;
}

      out.write('\r');
      out.write('\n');

// 세션에서 userId 가져오기 
if (userId == null) {
	response.sendRedirect("login.jsp");
	return;
} // DAO를 통해 유저 정보를 가져옴 
User_DAO userDAO = new User_DAO();
User_DTO user = userDAO.getUserById(userId); //유저 정보가 null이 아니면 이름과 권한을 설정한다. 
String helloUser = "로그인이 필요한 서비스입니다.";
String userRole = "";
String userName = "";
if (user != null) {
	userRole = user.getJob();
	userName = user.getUserName();
	helloUser = userRole + " " + userName + "님, 환영합니다!";
}

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<link rel=\"icon\" href=\"img/icon.png\" />\r\n");
      out.write("<title>혁신적인 밀키트 생산관리, HHMES</title>\r\n");
      out.write("\r\n");
      out.write("<!-- css link -->\r\n");
      out.write("<link rel=\"stylesheet\" href=\"css/reset.css\">\r\n");
      out.write("<link rel=\"stylesheet\" href=\"css/common.css\">\r\n");
      out.write("<!-- javascript link -->\r\n");
      out.write("<script src=\"js/indexScript.js\"></script>\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body class=\"index\">\r\n");
      out.write("	<nav>\r\n");
      out.write("		<div class=\"logo-layer\">\r\n");
      out.write("			<img src=\"img/mainlogo.png\" alt=\"logo\" class=\"logo\" id=\"nav-mainlogo\">\r\n");
      out.write("		</div>\r\n");
      out.write("		<div class=\"navigation\">\r\n");
      out.write("			<button class=\"nav-button\">기준관리</button>\r\n");
      out.write("			<ul class=\"nav-tag\">\r\n");
      out.write("				<li id=\"nav-bomlist\">부품코드</li>\r\n");
      out.write("				<li id=\"nav-inspection\">검사기준</li>\r\n");
      out.write("				<li id=\"nav-process\">생산공정</li>\r\n");
      out.write("				<li id=\"nav-bom\">BOM</li>\r\n");
      out.write("			</ul>\r\n");
      out.write("			<button class=\"nav-button\">생산관리</button>\r\n");
      out.write("			<ul class=\"nav-tag\">\r\n");
      out.write("				<li id=\"nav-workorder\">생산계획</li>\r\n");
      out.write("				<li id=\"nav-perfomanceRegistratio\">실적등록</li>\r\n");
      out.write("				<li id=\"nav-qualityControl\">품질관리</li>\r\n");
      out.write("				<li id=\"nav-inventory\">재고현황조회</li>\r\n");
      out.write("			</ul>\r\n");
      out.write("			<button class=\"nav-button\">실적보고서</button>\r\n");
      out.write("			<ul class=\"nav-tag\">\r\n");
      out.write("				<li id=\"nav-perform\">실적보고</li>\r\n");
      out.write("				<li id=\"nav-report\">주요지표</li>\r\n");
      out.write("				<li id=\"nav-chart\">대시보드</li>\r\n");
      out.write("			</ul>\r\n");
      out.write("			<button class=\"nav-button\">게시판</button>\r\n");
      out.write("			<ul class=\"nav-tag\">\r\n");
      out.write("				<li id=\"nav-공지사항\">공지사항</li>\r\n");
      out.write("				<li id=\"nav-사내복지\">사내복지</li>\r\n");
      out.write("				<li id=\"nav-일반게시판\">일반게시판</li>\r\n");
      out.write("			</ul>\r\n");
      out.write("		</div>\r\n");
      out.write("	</nav>\r\n");
      out.write("	<div class=\"gnb-bar\">\r\n");
      out.write("		<div class=\"my-layer\">\r\n");
      out.write("			<div class=\"my-populater\">\r\n");
      out.write("				<div id=\"mypagePopup\" class=\"mypage-layer\">\r\n");
      out.write("					<div class=\"my-page\">\r\n");
      out.write("						<img src=\"./img/mypage-img.png\" class=\"mypage-img\" id=\"mypage-img\"\r\n");
      out.write("							alt=\"mypage-img\">\r\n");
      out.write("					</div>\r\n");
      out.write("					<h6 class=\"login-button\">\r\n");
      out.write("						");
      out.print(helloUser);
      out.write("\r\n");
      out.write("					</h6>\r\n");
      out.write("				</div>\r\n");
      out.write("				<!-- mobile version nav bar -->\r\n");
      out.write("				<button type=\"button\" class=\"mobnav-bar\">\r\n");
      out.write("					<span class=\"mobnav bar1\"></span> <span class=\"mobnav bar2\"></span>\r\n");
      out.write("					<span class=\"mobnav bar3\"></span>\r\n");
      out.write("				</button>\r\n");
      out.write("			</div>\r\n");
      out.write("			<ol class=\"local-bar\">\r\n");
      out.write("				<li>Home</li>\r\n");
      out.write("				<li></li>\r\n");
      out.write("				<li></li>\r\n");
      out.write("			</ol>\r\n");
      out.write("		</div>\r\n");
      out.write("		<div class=\"navopen-shadow\"></div>\r\n");
      out.write("		<iframe src=\"MainTitle.jsp\" id=\"Mainiframe\"></iframe>\r\n");
      out.write("	</div>\r\n");
      out.write("	<!-- 팝업창 -->\r\n");
      out.write("	<div id=\"popup\" class=\"popup\">\r\n");
      out.write("		<div id=\"popup-title\" class=\"popup-title\">\r\n");
      out.write("			<h2>\r\n");
      out.write("				안녕하세요.\r\n");
      out.write("				");
      out.print(userName);
      out.write("\r\n");
      out.write("				님!\r\n");
      out.write("			</h2>\r\n");
      out.write("		</div>\r\n");
      out.write("		<p>\r\n");
      out.write("			현재\r\n");
      out.write("			");
      out.print(userName);
      out.write("님의 권한은\r\n");
      out.write("			");
      out.print(userRole);
      out.write("\r\n");
      out.write("			입니다.\r\n");
      out.write("		</p>\r\n");
      out.write("		<div name=\"popup-buttonlayer\" id=\"popup-buttonlayer\"\r\n");
      out.write("			class=\"popup-buttonlayer\">\r\n");
      out.write("			<a id=\"mypage-a\" class=\"mypopup-a\">마이페이지</a> <a id=\"logout-a\"\r\n");
      out.write("				class=\"mypopup-a\">로그아웃</a>\r\n");
      out.write("			<button id=\"closePopupBtn\" class=\"closebtn\">닫기</button>\r\n");
      out.write("		</div>\r\n");
      out.write("	</div>\r\n");
      out.write("</body>\r\n");
      out.write("\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
